var documenterSearchIndex = {"docs":
[{"location":"#FINUFFT.jl-Reference","page":"FINUFFT.jl Reference","title":"FINUFFT.jl Reference","text":"","category":"section"},{"location":"","page":"FINUFFT.jl Reference","title":"FINUFFT.jl Reference","text":"For installation and basic usage, see the README at https://github.com/ludvigak/FINUFFT.jl","category":"page"},{"location":"","page":"FINUFFT.jl Reference","title":"FINUFFT.jl Reference","text":"For documentation of the library functions that are being called, see the FINUFFT documentation at https://finufft.readthedocs.io/en/latest/usage.html","category":"page"},{"location":"#Index","page":"FINUFFT.jl Reference","title":"Index","text":"","category":"section"},{"location":"","page":"FINUFFT.jl Reference","title":"FINUFFT.jl Reference","text":"","category":"page"},{"location":"#Types","page":"FINUFFT.jl Reference","title":"Types","text":"","category":"section"},{"location":"","page":"FINUFFT.jl Reference","title":"FINUFFT.jl Reference","text":"Modules = [FINUFFT]\nOrder = [:type]","category":"page"},{"location":"#FINUFFT.nufft_opts","page":"FINUFFT.jl Reference","title":"FINUFFT.nufft_opts","text":"mutable struct nufft_opts    \n    modeord             :: Cint\n    chkbnds             :: Cint              \n    # \n    debug               :: Cint                \n    spread_debug        :: Cint         \n    showwarn            :: Cint\n    # \n    nthreads            :: Cint\n    fftw                :: Cint                 \n    spread_sort         :: Cint          \n    spread_kerevalmeth  :: Cint   \n    spread_kerpad       :: Cint        \n    upsampfac           :: Cdouble         \n    spread_thread       :: Cint\n    maxbatchsize        :: Cint\n    spread_nthr_atomic  :: Cint\n    spread_max_sp_size  :: Cint\nend\n\nOptions struct passed to the FINUFFT library.\n\nFields\n\nmodeord :: Cint      (type 1,2 only):    0: CMCL-style increasing mode order                         1: FFT-style mode order chkbnds :: Cint     0: don't check NU pts in [-3pi,3pi)     1: do (<few % slower)\n\ndiagnostic opts...\n\ndebug :: Cint     0: silent     1: some timing/debug     2: more spread_debug :: Cint     0: silent     1: some timing/debug     2: tonnes showwarn :: Cint     0: don't print warnings to stderr     1: do\n\nalgorithm performance opts...\n\nnthreads :: Cint     number of threads to use, or 0 uses all available fftw :: Cint     plan flags to FFTW (FFTWESTIMATE=64, FFTWMEASURE=0,...) spreadsort :: Cint     0: don't sort     1: do     2: heuristic choice spreadkerevalmeth :: Cint     0: exp(sqrt()) spreading kernel     1: Horner piecewise poly (faster) spreadkerpad :: Cint     option only for exp(sqrt())     0: don't pad kernel to 4n     1: do upsampfac :: Cdouble     upsampling ratio sigma: 2.0 std, 1.25 small FFT, 0.0 auto spreadthread :: Cint     (vectorized ntr>1 only):    0: auto, 1: seq multithreaded,                                 2: parallel single-thread spread maxbatchsize :: Cint     option for vectorized ntr>1 only     max transform batch, 0 auto spreadnthratomic :: Cint     if >=0, threads above which spreader OMP critical goes atomic spreadmaxsp_size :: Cint     if >0, overrides spreader (dir=1) max subproblem size\n\n\n\n\n\n","category":"type"},{"location":"#Functions","page":"FINUFFT.jl Reference","title":"Functions","text":"","category":"section"},{"location":"","page":"FINUFFT.jl Reference","title":"FINUFFT.jl Reference","text":"Modules = [FINUFFT]\nOrder = [:function]","category":"page"},{"location":"#FINUFFT.finufft_default_opts-Tuple{}","page":"FINUFFT.jl Reference","title":"FINUFFT.finufft_default_opts","text":"finufft_default_opts()\n\nReturn a nufft_opts struct with the default FINUFFT settings.\nSee: https://finufft.readthedocs.io/en/latest/usage.html#options\n\n\n\n\n\n","category":"method"},{"location":"#FINUFFT.nufft1d1","page":"FINUFFT.jl Reference","title":"FINUFFT.nufft1d1","text":"nufft1d1(xj      :: Array{Float64}, \n         cj      :: Array{ComplexF64}, \n         iflag   :: Integer, \n         eps     :: Float64,\n         ms      :: Integer\n         [, opts :: nufft_opts]\n        ) -> Array{ComplexF64}\n\nCompute type-1 1D complex nonuniform FFT. \n\n\n\n\n\n","category":"function"},{"location":"#FINUFFT.nufft1d1!","page":"FINUFFT.jl Reference","title":"FINUFFT.nufft1d1!","text":"nufft1d1!(xj      :: Array{Float64}, \n          cj      :: Array{ComplexF64}, \n          iflag   :: Integer, \n          eps     :: Float64,\n          fk      :: Array{ComplexF64} \n          [, opts :: nufft_opts]\n        )\n\nCompute type-1 1D complex nonuniform FFT. Output stored in fk.\n\n\n\n\n\n","category":"function"},{"location":"#FINUFFT.nufft1d2","page":"FINUFFT.jl Reference","title":"FINUFFT.nufft1d2","text":"nufft1d2(xj      :: Array{Float64}, \n         iflag   :: Integer, \n         eps     :: Float64,\n         fk      :: Array{ComplexF64} \n         [, opts :: nufft_opts]\n        ) -> Array{ComplexF64}\n\nCompute type-2 1D complex nonuniform FFT. \n\n\n\n\n\n","category":"function"},{"location":"#FINUFFT.nufft1d2!","page":"FINUFFT.jl Reference","title":"FINUFFT.nufft1d2!","text":"nufft1d2!(xj      :: Array{Float64}, \n          cj      :: Array{ComplexF64}, \n          iflag   :: Integer, \n          eps     :: Float64,\n          fk      :: Array{ComplexF64} \n          [, opts :: nufft_opts]\n        )\n\nCompute type-2 1D complex nonuniform FFT. Output stored in cj.\n\n\n\n\n\n","category":"function"},{"location":"#FINUFFT.nufft1d3","page":"FINUFFT.jl Reference","title":"FINUFFT.nufft1d3","text":"nufft1d3(xj      :: Array{Float64}, \n         cj      :: Array{ComplexF64}, \n         iflag   :: Integer, \n         eps     :: Float64,\n         sk      :: Array{Float64},\n         [, opts :: nufft_opts]\n        ) -> Array{ComplexF64}\n\nCompute type-3 1D complex nonuniform FFT.\n\n\n\n\n\n","category":"function"},{"location":"#FINUFFT.nufft1d3!","page":"FINUFFT.jl Reference","title":"FINUFFT.nufft1d3!","text":"nufft1d3!(xj      :: Array{Float64}, \n          cj      :: Array{ComplexF64}, \n          iflag   :: Integer, \n          eps     :: Float64,\n          sk      :: Array{Float64},\n          fk      :: Array{ComplexF64},\n          [, opts :: nufft_opts]\n         )\n\nCompute type-3 1D complex nonuniform FFT. Output stored in fk.\n\n\n\n\n\n","category":"function"},{"location":"#FINUFFT.nufft2d1","page":"FINUFFT.jl Reference","title":"FINUFFT.nufft2d1","text":"nufft2d1(xj      :: Array{Float64}, \n         yj      :: Array{Float64}, \n         cj      :: Array{ComplexF64}, \n         iflag   :: Integer, \n         eps     :: Float64,\n         ms      :: Integer,\n         mt      :: Integer,\n         [, opts :: nufft_opts]\n        ) -> Array{ComplexF64}\n\nCompute type-1 2D complex nonuniform FFT.\n\n\n\n\n\n","category":"function"},{"location":"#FINUFFT.nufft2d1!","page":"FINUFFT.jl Reference","title":"FINUFFT.nufft2d1!","text":"nufft2d1!(xj      :: Array{Float64}, \n          yj      :: Array{Float64}, \n          cj      :: Array{ComplexF64}, \n          iflag   :: Integer, \n          eps     :: Float64,\n          fk      :: Array{ComplexF64} \n          [, opts :: nufft_opts]\n        )\n\nCompute type-1 2D complex nonuniform FFT. Output stored in fk.\n\n\n\n\n\n","category":"function"},{"location":"#FINUFFT.nufft2d2","page":"FINUFFT.jl Reference","title":"FINUFFT.nufft2d2","text":"nufft2d2(xj      :: Array{Float64}, \n         yj      :: Array{Float64}, \n         iflag   :: Integer, \n         eps     :: Float64,\n         fk      :: Array{ComplexF64} \n         [, opts :: nufft_opts]\n        ) -> Array{ComplexF64}\n\nCompute type-2 2D complex nonuniform FFT. \n\n\n\n\n\n","category":"function"},{"location":"#FINUFFT.nufft2d2!","page":"FINUFFT.jl Reference","title":"FINUFFT.nufft2d2!","text":"nufft2d2!(xj      :: Array{Float64}, \n          yj      :: Array{Float64}, \n          cj      :: Array{ComplexF64}, \n          iflag   :: Integer, \n          eps     :: Float64,\n          fk      :: Array{ComplexF64} \n          [, opts :: nufft_opts]\n        )\n\nCompute type-2 2D complex nonuniform FFT. Output stored in cj.\n\n\n\n\n\n","category":"function"},{"location":"#FINUFFT.nufft2d3","page":"FINUFFT.jl Reference","title":"FINUFFT.nufft2d3","text":"nufft2d3(xj      :: Array{Float64}, \n         yj      :: Array{Float64},\n         cj      :: Array{ComplexF64}, \n         iflag   :: Integer, \n         eps     :: Float64,\n         sk      :: Array{Float64},\n         tk      :: Array{Float64}\n         [, opts :: nufft_opts]\n        ) -> Array{ComplexF64}\n\nCompute type-3 2D complex nonuniform FFT.\n\n\n\n\n\n","category":"function"},{"location":"#FINUFFT.nufft2d3!","page":"FINUFFT.jl Reference","title":"FINUFFT.nufft2d3!","text":"nufft2d3!(xj      :: Array{Float64}, \n          yj      :: Array{Float64},\n          cj      :: Array{ComplexF64}, \n          iflag   :: Integer, \n          eps     :: Float64,\n          sk      :: Array{Float64},\n          tk      :: Array{Float64},\n          fk      :: Array{ComplexF64}\n          [, opts :: nufft_opts]\n         )\n\nCompute type-3 2D complex nonuniform FFT. Output stored in fk.\n\n\n\n\n\n","category":"function"},{"location":"#FINUFFT.nufft3d1","page":"FINUFFT.jl Reference","title":"FINUFFT.nufft3d1","text":"nufft3d1(xj      :: Array{Float64}, \n         yj      :: Array{Float64}, \n         zj      :: Array{Float64}, \n         cj      :: Array{ComplexF64}, \n         iflag   :: Integer, \n         eps     :: Float64,\n         ms      :: Integer,\n         mt      :: Integer,\n         mu      :: Integer,\n         [, opts :: nufft_opts]\n        ) -> Array{ComplexF64}\n\nCompute type-1 3D complex nonuniform FFT.\n\n\n\n\n\n","category":"function"},{"location":"#FINUFFT.nufft3d1!","page":"FINUFFT.jl Reference","title":"FINUFFT.nufft3d1!","text":"nufft3d1!(xj      :: Array{Float64}, \n          yj      :: Array{Float64}, \n          zj      :: Array{Float64}, \n          cj      :: Array{ComplexF64}, \n          iflag   :: Integer, \n          eps     :: Float64,\n          fk      :: Array{ComplexF64} \n          [, opts :: nufft_opts]\n        )\n\nCompute type-1 3D complex nonuniform FFT. Output stored in fk.\n\n\n\n\n\n","category":"function"},{"location":"#FINUFFT.nufft3d2","page":"FINUFFT.jl Reference","title":"FINUFFT.nufft3d2","text":"nufft3d2(xj      :: Array{Float64}, \n         yj      :: Array{Float64}, \n         zj      :: Array{Float64}, \n         iflag   :: Integer, \n         eps     :: Float64,\n         fk      :: Array{ComplexF64} \n         [, opts :: nufft_opts]\n        ) -> Array{ComplexF64}\n\nCompute type-2 3D complex nonuniform FFT. \n\n\n\n\n\n","category":"function"},{"location":"#FINUFFT.nufft3d2!","page":"FINUFFT.jl Reference","title":"FINUFFT.nufft3d2!","text":"nufft3d2!(xj      :: Array{Float64}, \n          yj      :: Array{Float64}, \n          zj      :: Array{Float64}, \n          cj      :: Array{ComplexF64}, \n          iflag   :: Integer, \n          eps     :: Float64,\n          fk      :: Array{ComplexF64} \n          [, opts :: nufft_opts]\n        )\n\nCompute type-2 3D complex nonuniform FFT. Output stored in cj.\n\n\n\n\n\n","category":"function"},{"location":"#FINUFFT.nufft3d3","page":"FINUFFT.jl Reference","title":"FINUFFT.nufft3d3","text":"nufft3d3(xj      :: Array{Float64}, \n         yj      :: Array{Float64},\n         zj      :: Array{Float64},\n         cj      :: Array{ComplexF64}, \n         iflag   :: Integer, \n         eps     :: Float64,\n         sk      :: Array{Float64},\n         tk      :: Array{Float64}\n         uk      :: Array{Float64}\n         [, opts :: nufft_opts]\n        ) -> Array{ComplexF64}\n\nCompute type-3 3D complex nonuniform FFT.\n\n\n\n\n\n","category":"function"},{"location":"#FINUFFT.nufft3d3!","page":"FINUFFT.jl Reference","title":"FINUFFT.nufft3d3!","text":"nufft3d3!(xj      :: Array{Float64}, \n          yj      :: Array{Float64},\n          zj      :: Array{Float64},\n          cj      :: Array{ComplexF64}, \n          iflag   :: Integer, \n          eps     :: Float64,\n          sk      :: Array{Float64},\n          tk      :: Array{Float64},\n          uk      :: Array{Float64},\n          fk      :: Array{ComplexF64}\n          [, opts :: nufft_opts]\n         )\n\nCompute type-3 3D complex nonuniform FFT. Output stored in fk.\n\n\n\n\n\n","category":"function"}]
}
